//calculator
//procedures are defined before calculator so code knows what they are
global proc CalculatorUI()
{
    global string $expression; //so the whole ui can use this expression
    //main window
    global string $mWindow;
  $mWindow = "Calculator";

  if(`window -exists $mWindow`)
  {
    deleteUI $mWindow;
  }

    
    $mWindow = `window -title "Calculate" -resizeToFitChildren 1 $mWindow`;
    //results
    global string $mRow;
    $mRow = `rowLayout -parent $mWindow $mRow`;
    global string $resultText;
    $resultText = `textField -parent $mRow -editable 0 -height 200 -width 400 -text $expression`;
    //number grid buttons and stuff 
    string $mGrid = `gridLayout -parent $mWindow -numberOfRowsColumns 6 4 -cellWidthHeight 100 100
                    -position "fillButton1" 1 -position "fillButton1" 2 -position "fillButton1" 3 -position "Clear" 4
                    -position "Mean" 5 -position "Median" 6 -position "Power" 7 -position "Divide" 8
                    -position "7" 9 -position "8" 10 -position "9" 11 -position "Multiply" 12
                    -position "4" 13 -position "5" 14 -position "6" 15 -position "Subtract" 16
                    -position "1" 17 -position "2" 18 -position "3" 19 -position "Add" 20
                    -position "," 21 -position "0" 22 -position "." 23 -position "Equals" 24 $mGrid`;
    //first row of buttons
    button -parent $mGrid -label "fillButton1" -enable 0; //filler button
    button -parent $mGrid -label "fillButton2" -enable 0;
    button -parent $mGrid -label "fillButton3" -enable 0;
    button -parent $mGrid -label "Clear" -command "ButtonClearCMD";
    //second row (left to right)
    button -parent $mGrid -label "Mean" -command "ButtonMeanCMD";
    button -parent $mGrid -label "Median" -command "ButtonMedCMD";
    button -parent $mGrid -label "Power" -command "UpdateExpression(^)";
    button -parent $mGrid -label "Divide" -command "UpdateExpression(/)";
    //third row
    button -parent $mGrid -label "7" -command "UpdateExpression(7)";
    button -parent $mGrid -label "8" -command "UpdateExpression(8)";
    button -parent $mGrid -label "9" -command "UpdateExpression(9)";
    button -parent $mGrid -label "Multiply" -command "UpdateExpression(*)";
    //fourth row
    button -parent $mGrid -label "4" -command "UpdateExpression(4)";
    button -parent $mGrid -label "5" -command "UpdateExpression(5)";
    button -parent $mGrid -label "6" -command "UpdateExpression(6)";
    button -parent $mGrid -label "Subtract" -command "UpdateExpression(-)";
    //fifth row
    button -parent $mGrid -label "1" -command "UpdateExpression(1)";
    button -parent $mGrid -label "2" -command "UpdateExpression(2)";
    button -parent $mGrid -label "3" -command "UpdateExpression(3)";
    button -parent $mGrid -label "Add" -command "UpdateExpression(+)";
    //sixth row
    button -parent $mGrid -label "," -command "UpdateExpression(,)";
    button -parent $mGrid -label "0" -command "UpdateExpression(0)";
    button -parent $mGrid -label "." -command "UpdateExpression(.)";
    button -parent $mGrid -label "Equals" -command "ButtonEqualsCMD";

    showWindow $mWindow;
    CalculatorUI();
}
global proc Add(float $numbers[])
{
    float $result = 0;
    string $numbersUsed = "";
    for ($num in $numbers)
    {
        $result += $num;
        $numbersUsed += $num; //should list which numbers are being added
        //puts space and comma on each number except for last number
        if (size($numbersUsed) > 0)
        {
            $numbersUsed += ", ";
        }
    }
    print("The sum of " + $numbersUsed + "is " +  $result);
}  

global proc Subtract(float $numbers[])
{
    float $result = 0;
    string $numbersUsed = "";

    for ($num in $numbers)
    {
        $result -= $num;
        $numbersUsed += $num;
        if (size($numbersUsed) > 0)
        {
            $numbersUsed += ", ";
        }        
    }
    print("The difference of " + $numbersUsed + "is " + $result);
} 

global proc Multiply(float $numbers[])
{
    //result starts at one since num * 0 would always be 0
    float $result = 1;
    string $numbersUsed = "";

    for ($num in $numbers)
    {
        $result *= $num;
        $numbersUsed += $num;
        if (size($numbersUsed) > 0)
        {
            $numbersUsed += ", ";
        }        
    }
    print("The sum of " + $numbersUsed + "is " + $result);
} 

global proc Divide(float $numbers[])
{
    float $result = $numbers[0]; // Initialize result to the first number
    string $numbersUsed = "";

    if (size($numbers) < 2)
    {
        error("At least two numbers are required for division.");
        return;
    }

    for ($i = 1; $i < size($numbers); $i++)
    {
        if ($numbers[$i] != 0)
        {
            $result /= $numbers[$i];
            $numbersUsed += $numbers[$i];
            if (size($numbersUsed) > 0)
            {
                $numbersUsed += ", ";
            }
        }
        else
        {
            error("You cannot divide by zero");
            return;
        }
    }

    print("The quotient of " + $numbersUsed + "is " + $result);
} 

global proc Power(float $base, int $exponent)
{
    float $result = 1;
    //multiplies base however many times exponent number is
    for ($i = 0; $i < $exponent; $i++)
    {
        $result *= $base;
    }
    print($base + " raised to the power of " + $exponent + " is " + $result);
}

global proc Mean(float $numbers[])
{
    float $sum = 0;
    int $count = size($numbers); // Get the count of numbers
    string $numbersUsed = "";

    for ($num in $numbers)
    {
        $sum += $num; //add all of the numbers together
        $numbersUsed += $num;
        $numbersUsed += ", ";
        if (size($numbersUsed) > 0)
        {
            $numbersUsed += ", ";
        }
    }
    
    float $result = $sum / $count; //divide by count
    print("The mean of " + $numbersUsed + "is " + $result);
}

global proc Median(float $numbers[])
{
    int $count = size($numbers);
    string $numbersUsed = "";

    // Sort the numbers in ascending order, stores with backticks
    float $sortedNumbers[] = `sort $numbers`;

    //puts the numbers into a string list for print
    for ($i = 0; $i < $count; $i++)
    {
        $numbersUsed += $sortedNumbers[$i];
        if ($i < $count - 1)
        {
            $numbersUsed += ", ";
        }
    }

    if ($count % 2 == 0)
    {
        // If the count is even, median is the average of middle two numbers
        int $middle = $count / 2;
        float $median = ($sortedNumbers[$middle - 1] + $sortedNumbers[$middle]) / 2.0;
        print("The median of " + $numbersUsed + "is " + $median);
    }
    else
    {
        // If the count is odd, median is the middle number
        int $middle = ($count - 1) / 2;
        float $median = $sortedNumbers[$middle];
        print("The median of " + $numbersUsed + "is " + $median);
    }
}

global proc Calculator(string $operation, float $numbers[])
{
    if($operation == "Add") 
    {
        Add($numbers);
    }
    else if($operation == "Subtract")
    {
        Subtract($numbers);
    }
    else if($operation == "Multiply")
    {
        Multiply($numbers);
    }
    else if($operation == "Divide")
    {
        Divide($numbers);
    }
    else if($operation == "Power")
    {
        if(size($numbers) == 2)
        {
            Power($numbers[0], int($numbers[1]));
        }
        else
        {
            error("Power operation requires two arguments: base and exponent.");
        }
    }
    else if($operation == "Mean")
    {
        Mean($numbers);
    }
    else if ($operation == "Median")
    {
        Median($numbers);
    }
    else
    {
        error("Invalid operation: " + $operation);
        return;
    }
}


//UI



//button commands
global proc ButtonClearCMD(float $numbers[])
{
   // clear $numbers[]; //sets array to 0 (doesnt work)
    //clear text field
    textField -edit -text "";
}

global proc UpdateExpression(string $value)
{
    global string $expression;
    $expression += $value;
    textField -edit -text $expression;
}

global proc ButtonEqualsCMD()
{
    global string $expression;
    updateExpression("=");
    string $result = `eval $expression`;
    //call function
    //Calculator("Multiply", {3,2,8,6,3,7,4,2,6,3,7,8,5,2,2});
    //display result
    textField -edit -text $result;
}

if(!`exists "Calculator"`)
{
    CalulatorUI();    
}
